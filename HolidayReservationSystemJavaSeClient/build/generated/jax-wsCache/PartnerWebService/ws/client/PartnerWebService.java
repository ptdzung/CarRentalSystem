
package ws.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PartnerWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PartnerWebService {


    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns ws.client.PartnerEntity
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "partnerLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.client.PartnerLogin")
    @ResponseWrapper(localName = "partnerLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.PartnerLoginResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/partnerLoginRequest", output = "http://ws.session.ejb/PartnerWebService/partnerLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/partnerLogin/Fault/InvalidLoginCredentialException")
    })
    public PartnerEntity partnerLogin(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param resId
     * @return
     *     returns java.lang.String
     * @throws RentalRecordNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "cancelReservation", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CancelReservation")
    @ResponseWrapper(localName = "cancelReservationResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.CancelReservationResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/cancelReservationRequest", output = "http://ws.session.ejb/PartnerWebService/cancelReservationResponse", fault = {
        @FaultAction(className = RentalRecordNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/cancelReservation/Fault/RentalRecordNotFoundException")
    })
    public String cancelReservation(
        @WebParam(name = "resId", targetNamespace = "")
        long resId)
        throws RentalRecordNotFoundException_Exception
    ;

    /**
     * 
     * @param partnerId
     * @param resId
     * @return
     *     returns java.lang.String
     * @throws EntityMismatchException_Exception
     * @throws RentalRecordNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrievePartnerReservationDetails", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrievePartnerReservationDetails")
    @ResponseWrapper(localName = "retrievePartnerReservationDetailsResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrievePartnerReservationDetailsResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationDetailsRequest", output = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationDetailsResponse", fault = {
        @FaultAction(className = RentalRecordNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationDetails/Fault/RentalRecordNotFoundException"),
        @FaultAction(className = EntityMismatchException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationDetails/Fault/EntityMismatchException")
    })
    public String retrievePartnerReservationDetails(
        @WebParam(name = "resId", targetNamespace = "")
        long resId,
        @WebParam(name = "partnerId", targetNamespace = "")
        long partnerId)
        throws EntityMismatchException_Exception, RentalRecordNotFoundException_Exception
    ;

    /**
     * 
     * @param part
     * @return
     *     returns java.util.List<ws.client.RentalRecordEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveRentalRecordsByPartner", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveRentalRecordsByPartner")
    @ResponseWrapper(localName = "retrieveRentalRecordsByPartnerResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.client.RetrieveRentalRecordsByPartnerResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrieveRentalRecordsByPartnerRequest", output = "http://ws.session.ejb/PartnerWebService/retrieveRentalRecordsByPartnerResponse")
    public List<RentalRecordEntity> retrieveRentalRecordsByPartner(
        @WebParam(name = "part", targetNamespace = "")
        PartnerEntity part);

}
